.. _git-notes-using:
.. vim: syntax=rst
.. vim: textwidth=72
.. vim: spell spelllang=ru,en

===========================
Использование заметок git-а
===========================

.. warning::
   На момент написания данного раздела документации, git не имеет
   дружелюбных к пользователю команд для работы с заметками. Многие
   действия сопровождаются ручным указанием хэшей объектов.

.. contents::

Введение
========
В git-е имеется команда управления заметками (notes) -- git-notes.
Данная команда позволяет добавлять, удалять, изменять, отображать
заметки к любым объектам внутри git-а:

* коммитам
* блобам (blobs)
* деревьям (trees)

Заметка сама по себе является блобом. Создание и редактирование заметок
сопровождается порождением новых коммитов. То есть версионирование
заметок происходит, ровно как и их возможность слияния (merging).
Система управления заметками представляет из себя нечто вроде git-а в
git-е: это подуровень веток/ссылок, отдельное пространство коммитов
и блобов, просто связанных c обычным пространством дополнительным
полем информационном в коммите.

Заметки используются, как правило, для дополнения информацией уже
существующие коммиты. Например в случае с aStor2 это может быть
информация о закрытых задачах в системе трэкинга. Не всегда имеется
возможность записать в сообщение коммита информацию о закрытом
задании и, кроме того, для стороннего наблюдателя данная информация
абсолютно не несёт полезной нагрузки. Это часто могут быть пометки вида
"Протестировано тем-то", "Бага тут-то", итд.

Добавление и редактирование
===========================
Добавить заметку к коммиту (их можно добавлять и к блобам с деревьями,
однако обычные команды типа *git log* не отобразят их) проще простого::

  % git notes add HEAD <-- можно и: master~1 | master~2 | 78dasd7 | tag2
  [editing]
  % git log
  commit 896cec7e5e7495faa8110694748b5e2909ea5304
  Author: Sergey Matveev <stargrave@stargrave.org>
  Date:   Mon May 2 15:13:53 2011 +0400
  
      Reduce conditional checks quantity
      Signed-off-by: Sergey Matveev <stargrave@stargrave.org>
  
  Notes:
      This should close ticker #666

Вместо команды *add* можно указать *edit*, что приведёт к
редактированию заметки.

Пространства имён
=================
Так как заметок к какому-либо объекту может быть всего одна,
то придуманы были пространства имён (namespaces) разные для
них. Технически они представляют из себя самые обычные ветки --
то есть указатели разноимённые.

Указать пространство имени текущее (для конкретно сейчас производимого
действия) можно используя опцию командной строки::

  % git notes --ref=track.etegro.local add notes fj32h1
  [editing]
  % git log
  commit 896cec7e5e7495faa8110694748b5e2909ea5304
  Author: Sergey Matveev <stargrave@stargrave.org>
  Date:   Mon May 2 15:13:53 2011 +0400
  
      Reduce conditional checks quantity
      Signed-off-by: Sergey Matveev <stargrave@stargrave.org>
  
  Notes (discussion):
      This need rewriting of unittests
  
  Notes (track.etegro.local):
      Closed #666

Команде *git log* может потребоваться указание какие пространства
имён показывать::

  % git log master --show-notes="*"

Также можно указать текущее пространство имён для всех команд, если
оно часто используется::

  % export GIT_NOTES_REF=refs/notes/discussion

Совместное использование
========================
Здесь имеется ряд проблем из-за того что для git-а заметки относительно
недавнее нововведение. Со временем безусловно весь этот процесс
значительно упростится. Проблема в том, что git автоматически умеет
преобразовывать такие вещи как *master* в настоящий путь к ссылке
*refs/heads/master*. С notes-ами он этого пока не делает. Поэтому
чтобы опубликовать заметки, необходимо писать например следующее::

  % git push origin refs/notes/commits <-- "commits" это namespace,
                                           может быть и "*"

Для получения заметок также необходимо указывать полные пути к ссылкам
обоих сторон. То есть делать нечто::

  % git fetch origin refs/notes/*:refs/notes/*

Для сокращения набора можно сделать и удобные алиасы внутри
конфигурационного файла для конкретного remote-а::

  fetch = +refs/notes/*:refs/notes/*
