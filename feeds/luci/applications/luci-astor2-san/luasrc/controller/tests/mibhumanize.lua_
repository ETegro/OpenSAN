--[[
  aStor2 -- storage area network configurable via Web-interface
  Copyright (C) 2009-2012 ETegro Technologies, PLC
                          Vladimir Petukhov (vladimir.petukhov@etegro.com)
                          Sergey Matveev <stargrave@stargrave.org>
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]

require( "luaunit" )
matrix = require( "matrix" )

TestMibToTib = {}
	function TestMibToTib:test_values_160gb()
		assertEquals( matrix.mib2tib( 160E3 ), "0.15" )
	end
	function TestMibToTib:test_values_320gb()
		assertEquals( matrix.mib2tib( 320E3 ), "0.30" )
	end
	function TestMibToTib:test_values_640gb()
		assertEquals( matrix.mib2tib( 640E3 ), "0.61" )
	end
	function TestMibToTib:test_values_750gb()
		assertEquals( matrix.mib2tib( 750E3 ), "0.71" )
	end
	function TestMibToTib:test_values_1tb()
		assertEquals( matrix.mib2tib( 1E6 ), "0.95" )
	end
	function TestMibToTib:test_values_1500gb()
		assertEquals( matrix.mib2tib( 15E5 ), "1.43" )
	end
	function TestMibToTib:test_values_2tb()
		assertEquals( matrix.mib2tib( 2E6 ), "1.90" )
	end
	function TestMibToTib:test_values_10tb()
		assertEquals( matrix.mib2tib( 10E6 ), "9.53" )
	end
	function TestMibToTib:test_values_100tb()
		assertEquals( matrix.mib2tib( 100E6 ), "95.36" )
	end
	function TestMibToTib:test_values_1pb()
		assertEquals( matrix.mib2tib( 1E9 ), "953.67" )
	end
	function TestMibToTib:test_values_zero()
		assertEquals( matrix.mib2tib( 0 ), "0.00" )
	end

TestTrueMib = {}
	function TestTrueMib:test_int_value_negative()
		assertEquals( matrix.size_round( -1 ), "-1" )
	end
	function TestTrueMib:test_float_value_negative()
		assertEquals( matrix.size_round( -1.0 ), "-1" )
	end
	function TestTrueMib:test_int_value_zero()
		assertEquals( matrix.size_round( 0 ), "0" )
	end
	function TestTrueMib:test_float_value_zero()
		assertEquals( matrix.size_round( 0.0 ), "0" )
	end
	function TestTrueMib:test_int_value_one()
		assertEquals( matrix.size_round( 1 ), "1" )
	end
	function TestTrueMib:test_float_value_one()
		assertEquals( matrix.size_round( 1.0 ), "1" )
	end
	function TestTrueMib:test_value_float_number_1()
		assertEquals( matrix.size_round( 30.1234567 ), "30" )
	end
	function TestTrueMib:test_value_float_number_2()
		assertEquals( matrix.size_round( 0.123 ), "0" )
	end
	function TestTrueMib:test_value_float_number_3()
		assertEquals( matrix.size_round( 0.123456789 ), "0" )
	end
	function TestTrueMib:test_value_float_number_4()
		assertEquals( matrix.size_round( 1234567890.123456789 ), "1234567890" )
	end
	function TestTrueMib:test_value_float_number_5()
		assertEquals( matrix.size_round( 1E3 ), "1000" )
	end
	function TestTrueMib:test_value_float_number_6()
		assertEquals( matrix.size_round( 5E3 + 0.000000000123 ), "5000" )
	end

TestSizesHumanization = {}
	function TestSizesHumanization:test_less_than_gig()
		assertEquals( matrix.mib_humanize( 123 )[ "value" ], "123" )
		assertEquals( matrix.mib_humanize( 123 )[ "unit" ], "MiB" )
	end
	function TestSizesHumanization:test_less_than_tib()
		assertEquals( matrix.mib_humanize( 123666 )[ "value" ], "121" )
		assertEquals( matrix.mib_humanize( 123666 )[ "unit" ], "GiB" )
	end
	function TestSizesHumanization:test_more_than_tib()
		assertEquals( matrix.mib_humanize( 1236669 )[ "value" ], "1.17" )
		assertEquals( matrix.mib_humanize( 1236669 )[ "unit" ], "TiB" )
	end

LuaUnit:run()
