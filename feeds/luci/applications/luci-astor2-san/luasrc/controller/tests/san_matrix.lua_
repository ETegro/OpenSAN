--[[
  aStor2 -- storage area network configurable via Web-interface
  Copyright (C) 2009-2011 ETegro Technologies, PLC
                          Sergey Matveev <stargrave@stargrave.org>
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]

require( "luaunit" )
common = require( "astor2.common" )
lvm = require( "astor2.lvm" )
einarc = require( "astor2.einarc" )
matrix = require( "matrix" )

-- Those tests are taken from boot library
TestGcd = {}
	function TestGcd:test1()
		assertEquals( matrix.gcd(  1, -1), 1 )
	end
	function TestGcd:test2()
		assertEquals( matrix.gcd( -1,  1), 1 )
	end
	function TestGcd:test3()
		assertEquals( matrix.gcd(  1,  1), 1 )
	end
	function TestGcd:test4()
		assertEquals( matrix.gcd( -1, -1), 1 )
	end
	function TestGcd:test5()
		assertEquals( matrix.gcd(  0,  0), 0 )
	end
	function TestGcd:test6()
		assertEquals( matrix.gcd(  7,  0), 7 )
	end
	function TestGcd:test7()
		assertEquals( matrix.gcd(  0,  9), 9 )
	end
	function TestGcd:test8()
		assertEquals( matrix.gcd( -7,  0), 7 )
	end
	function TestGcd:test9()
		assertEquals( matrix.gcd(  0, -9), 9 )
	end
	function TestGcd:test10()
		assertEquals( matrix.gcd( 42, 30), 6 )
	end
	function TestGcd:test11()
		assertEquals( matrix.gcd(  6, -9), 3 )
	end
	function TestGcd:test12()
		assertEquals( matrix.gcd(-10,-10), 10 )
	end
	function TestGcd:test13()
		assertEquals( matrix.gcd(-25,-10), 5 )
	end
	function TestGcd:test14()
		assertEquals( matrix.gcd(  3,  7), 1 )
	end
	function TestGcd:test15()
		assertEquals( matrix.gcd(  8,  9), 1 )
	end
	function TestGcd:test16()
		assertEquals( matrix.gcd(  7, 49), 7 )
	end

-- Those tests are taken from boost library
TestLcm = {}
	function TestLcm:test1()
		assertEquals( matrix.lcm(  1,  -1), 1 )
	end
	function TestLcm:test2()
		assertEquals( matrix.lcm( -1,   1), 1 )
	end
	function TestLcm:test3()
		assertEquals( matrix.lcm(  1,   1), 1 )
	end
	function TestLcm:test4()
		assertEquals( matrix.lcm( -1,  -1), 1 )
	end
	function TestLcm:test5()
		assertEquals( matrix.lcm(  0,   0), 0 )
	end
	function TestLcm:test6()
		assertEquals( matrix.lcm(  6,   0), 0 )
	end
	function TestLcm:test7()
		assertEquals( matrix.lcm(  0,   7), 0 )
	end
	function TestLcm:test8()
		assertEquals( matrix.lcm( -5,   0), 0 )
	end
	function TestLcm:test9()
		assertEquals( matrix.lcm(  0,  -4), 0 )
	end
	function TestLcm:test10()
		assertEquals( matrix.lcm( 18,  30), 90 )
	end
	function TestLcm:test11()
		assertEquals( matrix.lcm( -6,   9), 18 )
	end
	function TestLcm:test12()
		assertEquals( matrix.lcm(-10, -10), 10 )
	end
	function TestLcm:test13()
		assertEquals( matrix.lcm( 25, -10), 50 )
	end
	function TestLcm:test14()
		assertEquals( matrix.lcm(  3,   7), 21 )
	end
	function TestLcm:test15()
		assertEquals( matrix.lcm(  8,   9), 72 )
	end
	function TestLcm:test16()
		assertEquals( matrix.lcm(  7,  49), 49 )
	end

TestMatrix = {}
	function TestMatrix:setUp()
		self.access_patterns = {
			{
				name = "foobaz1",
				section_name = "foobar1",
				targetdriver = "iscsi",
				enabled = true,
				readonly = false,
				lun = 1
			},
			{
				name = "foobaz2",
				section_name = "foobar2",
				targetdriver = "iscsi",
				enabled = true,
				readonly = false,
				lun = 2
			},
			{
				name = "foobar3",
				section_name = "foobar3",
				targetdriver = "iscsi",
				enabled = true,
				readonly = false,
				lun = 3
			},
			{
				name = "foobar4",
				section_name = "foobar4",
				targetdriver = "iscsi",
				enabled = true,
				readonly = false,
				lun = 4
			},
			{
				name = "foobar5",
				section_name = "foobar5",
				targetdriver = "iscsi",
				enabled = true,
				readonly = false,
				lun = 5
			}
		}
		self.physicals_triple = {
			["3:1"] = {
				id = "3:1",
				model = "model1",
				revision = "qwerty",
				serial = "010001111",
				size = 666,
				state = "9"
			},
			["3:2"] = {
				id = "3:2",
				model = "model1",
				revision = "qwerty",
				serial = "010001112",
				size = 666,
				state = "9"
			}
		}
		self.logicals_triple = {
			[9] = {
				id = 9,
				level = "1",
				physicals = {
					["3:1"] = "9",
					["3:2"] = "9"
				},
				capacity = 666.0,
				device = "/dev/md3",
				state = "normal",
				logical_volumes = {
					["foo"] = lvm.LogicalVolume:new( {
						name = "foo",
						device = "foobar1",
						volume_group = {}, -- It is dummy
						size = 12
					} ),
					["bar"] = lvm.LogicalVolume:new( {
						name = "bar",
						device = "foobar2",
						volume_group = {}, -- It is dummy
						size = 23
					} ),
					["baz"] = lvm.LogicalVolume:new( {
						name = "baz",
						device = "foobar3",
						volume_group = {}, -- It is dummy
						size = 34
					} )
				}
			}
		}
		self.physicals_double = {
			["3:1"] = {
				id = "3:1",
				model = "model1",
				revision = "qwerty",
				serial = "010001111",
				size = 666,
				state = "3"
			},
			["3:2"] = {
				id = "3:2",
				model = "model1",
				revision = "qwerty",
				serial = "010001112",
				size = 666,
				state = "3"
			},
			["13:1"] = {
				id = "13:1",
				model = "model2",
				revision = "asdfgh",
				serial = "010001121",
				size = 333,
				state = "13"
			},
			["13:2"] = {
				id = "13:2",
				model = "model2",
				revision = "asdfgh",
				serial = "010001122",
				size = 333,
				state = "13"
			},
			["13:3"] = {
				id = "13:3",
				model = "model2",
				revision = "asdfgh",
				serial = "010001123",
				size = 333,
				state = "13"
			},
			["13:4"] = {
				id = "13:4",
				model = "model2",
				revision = "asdfgh",
				serial = "010001124",
				size = 333,
				state = "failed"
			},
			["13:5"] = {
				id = "13:5",
				model = "model2",
				revision = "asdfgh",
				serial = "010001125",
				size = 333,
				state = "hotspare"
			}
		}
		self.logicals_double = {
			[3] = {
				id = 3,
				level = "1",
				physicals = {
					["3:1"] = "3",
					["3:2"] = "3"
				},
				capacity = 666.0,
				device = "/dev/md3",
				state = "normal"
			},
			[13] = {
				id = 13,
				level = "5",
				physicals = {
					["13:1"] = "13",
					["13:2"] = "13",
					["13:3"] = "13",
					["13:4"] = "failed",
					["13:5"] = "hotspare"
				},
				capacity = 666.0,
				device = "/dev/md13",
				state = "degraded",
				progress = 66.6
			}
		}
	end
	function TestMatrix:test_volume_group_percentage_zero()
		local logicals = self.logicals_triple
		logicals[9].logical_volumes["bar"].volume_group.total = 0
		logicals[9].logical_volumes["bar"].volume_group.allocated = 100

		-- Dummy values
		logicals[9].logical_volumes["foo"].volume_group.total = 0
		logicals[9].logical_volumes["foo"].volume_group.allocated = 0
		logicals[9].logical_volumes["baz"].volume_group.total = 0
		logicals[9].logical_volumes["baz"].volume_group.allocated = 0

		local matrix = matrix.filter_volume_group_percentage(
			matrix.overall( {
				physicals = self.physicals_triple,
				logicals = self.logicals_triple
			} )
		)
		assertEquals( matrix[1].logical_volume.volume_group.percentage, 0 )
	end
	function TestMatrix:test_volume_group_percentage()
		local logicals = self.logicals_triple
		logicals[9].logical_volumes["foo"].volume_group.total = 666
		logicals[9].logical_volumes["foo"].volume_group.allocated = 123

		logicals[9].logical_volumes["bar"].volume_group.total = 100
		logicals[9].logical_volumes["bar"].volume_group.allocated = 12

		logicals[9].logical_volumes["baz"].volume_group.total = 213456
		logicals[9].logical_volumes["baz"].volume_group.allocated = 213056
		local matrix = matrix.filter_volume_group_percentage(
			matrix.overall( {
				physicals = self.physicals_triple,
				logicals = self.logicals_triple
			} )
		)
		assertEquals( matrix[1].logical_volume.volume_group.percentage, 12 )
		assertEquals( matrix[3].logical_volume.volume_group.percentage, 100 )
		assertEquals( matrix[5].logical_volume.volume_group.percentage, 19 )
	end
	function TestMatrix:test_matrix_double()
		local needed = {
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = true,
						right = false,
						bottom = false
					},
					id = "3:1",
					model = "model1",
					revision = "qwerty",
					serial = "010001111",
					size = 666,
					state = "allocated"
				},
				logical = {
					rowspan = 2,
					highlight = {
						left = false,
						top = true,
						right = true,
						bottom = true
					},
					id = 3,
					level = "1",
					physicals = {
						["3:1"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = true,
								right = false,
								bottom = false
							},
							id = "3:1",
							model = "model1",
							revision = "qwerty",
							serial = "010001111",
							size = 666,
							state = "allocated"
						},
						["3:2"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = false,
								right = false,
								bottom = true
							},
							id = "3:2",
							model = "model1",
							revision = "qwerty",
							serial = "010001112",
							size = 666,
							state = "allocated"
						}
					},
					capacity = 666.0,
					device = "/dev/md3",
					state = "normal"
				}
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = false,
						right = false,
						bottom = true
					},
					id = "3:2",
					model = "model1",
					revision = "qwerty",
					serial = "010001112",
					size = 666,
					state = "allocated"
				}
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = true,
						right = false,
						bottom = false
					},
					id = "13:1",
					model = "model2",
					revision = "asdfgh",
					serial = "010001121",
					size = 333,
					state = "allocated"
				},
				logical = {
					rowspan = 5,
					highlight = {
						left = false,
						top = true,
						right = true,
						bottom = true
					},
					id = 13,
					level = "5",
					physicals = {
						["13:1"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = true,
								right = false,
								bottom = false
							},
							id = "13:1",
							model = "model2",
							revision = "asdfgh",
							serial = "010001121",
							size = 333,
							state = "allocated"
						},
						["13:2"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = false,
								right = false,
								bottom = false
							},
							id = "13:2",
							model = "model2",
							revision = "asdfgh",
							serial = "010001122",
							size = 333,
							state = "allocated"
						},
						["13:3"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = false,
								right = false,
								bottom = false
							},
							id = "13:3",
							model = "model2",
							revision = "asdfgh",
							serial = "010001123",
							size = 333,
							state = "allocated"
						},
						["13:4"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = false,
								right = false,
								bottom = false
							},
							id = "13:4",
							model = "model2",
							revision = "asdfgh",
							serial = "010001124",
							size = 333,
							state = "failed"
						},
						["13:5"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = false,
								right = false,
								bottom = true
							},
							id = "13:5",
							model = "model2",
							revision = "asdfgh",
							serial = "010001125",
							size = 333,
							state = "hotspare"
						}
					},
					capacity = 666.0,
					device = "/dev/md13",
					state = "degraded",
					progress = 66.6
				}
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = false,
						right = false,
						bottom = false
					},
					id = "13:2",
					model = "model2",
					revision = "asdfgh",
					serial = "010001122",
					size = 333,
					state = "allocated"
				},
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = false,
						right = false,
						bottom = false
					},
					id = "13:3",
					model = "model2",
					revision = "asdfgh",
					serial = "010001123",
					size = 333,
					state = "allocated"
				},
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = false,
						right = false,
						bottom = false
					},
					id = "13:4",
					model = "model2",
					revision = "asdfgh",
					serial = "010001124",
					size = 333,
					state = "failed"
				},
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = false,
						right = false,
						bottom = true
					},
					id = "13:5",
					model = "model2",
					revision = "asdfgh",
					serial = "010001125",
					size = 333,
					state = "hotspare"
				}
			}
		}

		assert( common.compare_tables(
				matrix.filter_borders_highlight(
					matrix.overall( {
						physicals = self.physicals_double, -- actually should be astor2.einarc.etc
						logicals = self.logicals_double,   -- actually should be astor2.einarc.etc
					} )
				),
				needed
			)
		)
	end
	function TestMatrix:test_matrix_double_sorted()
		local physicals = {
			["0:1"] = {
				id = "0:1",
				model = "model2",
				revision = "asdfgh",
				serial = "010001121",
				size = 333,
				state = "0"
			},
			["0:2"] = {
				id = "0:2",
				model = "model2",
				revision = "asdfgh",
				serial = "010001122",
				size = 333,
				state = "1"
			},
			["0:3"] = {
				id = "0:3",
				model = "model2",
				revision = "asdfgh",
				serial = "010001123",
				size = 333,
				state = "2"
			}
		}
		local logicals = {
			[0] = {
				id = 0,
				level = "linear",
				physicals = {
					["0:1"] = "0",
				},
				capacity = 333.0,
				device = "/dev/md0",
				state = "normal"
			},
			[1] = {
				id = 1,
				level = "linear",
				physicals = {
					["0:2"] = "1",
				},
				capacity = 333.0,
				device = "/dev/md1",
				state = "normal"
			},
			[2] = {
				id = 2,
				level = "linear",
				physicals = {
					["0:3"] = "2",
				},
				capacity = 333.0,
				device = "/dev/md2",
				state = "normal"
			}
		}
		local needed = {
			{
				physical = {
					rowspan = 1,
					id = "0:1",
					model = "model2",
					revision = "asdfgh",
					serial = "010001121",
					size = 333,
					state = "allocated"
				},
				logical = {
					rowspan = 1,
					id = 0,
					level = "linear",
					physicals = {
						["0:1"] = {
							rowspan = 1,
							id = "0:1",
							model = "model2",
							revision = "asdfgh",
							serial = "010001121",
							size = 333,
							state = "allocated"
						}
					},
					capacity = 333.0,
					device = "/dev/md0",
					state = "normal"
				}
			},
			{
				physical = {
					rowspan = 1,
					id = "0:2",
					model = "model2",
					revision = "asdfgh",
					serial = "010001122",
					size = 333,
					state = "allocated"
				},
				logical = {
					rowspan = 1,
					id = 1,
					level = "linear",
					physicals = {
						["0:2"] = {
							rowspan = 1,
							id = "0:2",
							model = "model2",
							revision = "asdfgh",
							serial = "010001122",
							size = 333,
							state = "allocated"
						}
					},
					capacity = 333.0,
					device = "/dev/md1",
					state = "normal"
				}
			},
			{
				physical = {
					rowspan = 1,
					id = "0:3",
					model = "model2",
					revision = "asdfgh",
					serial = "010001123",
					size = 333,
					state = "allocated"
				},
				logical = {
					rowspan = 1,
					id = 2,
					level = "linear",
					physicals = {
						["0:3"] = {
							rowspan = 1,
							id = "0:3",
							model = "model2",
							revision = "asdfgh",
							serial = "010001123",
							size = 333,
							state = "allocated"
						}
					},
					capacity = 333.0,
					device = "/dev/md2",
					state = "normal"
				}
			},
		}

		assert( common.compare_tables(
				matrix.overall( {
					physicals = physicals,
					logicals = logicals,
				} ),
				needed
			)
		)
	end

	function TestMatrix:test_matrix_triple()
		local needed = {
			-- 1
			{
				physical = {
					rowspan = 3,
					highlight = {
						left = true,
						top = true,
						right = false,
						bottom = false
					},
					id = "3:1",
					model = "model1",
					revision = "qwerty",
					serial = "010001111",
					size = 666,
					state = "allocated"
				},
				logical = {
					rowspan = 6,
					highlight = {
						left = false,
						top = true,
						right = false,
						bottom = true
					},
					id = 9,
					level = "1",
					physicals = {
						["3:1"] = {
							rowspan = 3,
							highlight = {
								left = true,
								top = true,
								right = false,
								bottom = false
							},
							id = "3:1",
							model = "model1",
							revision = "qwerty",
							serial = "010001111",
							size = 666,
							state = "allocated"
						},
						["3:2"] = {
							rowspan = 3,
							highlight = {
								left = true,
								top = false,
								right = false,
								bottom = true
							},
							id = "3:2",
							model = "model1",
							revision = "qwerty",
							serial = "010001112",
							size = 666,
							state = "allocated"
						}
					},
					logical_volumes = {
						["foo"] = {
							rowspan = 2,
							highlight = {
								left = false,
								top = false,
								right = true,
								bottom = true
							},
							name = "foo",
							device = "foobar1",
							volume_group = {},
							snapshots = {},
							size = 12
						},
						["bar"] = {
							rowspan = 2,
							highlight = {
								left = false,
								top = true,
								right = true,
								bottom = false
							},
							name = "bar",
							device = "foobar2",
							volume_group = {},
							snapshots = {},
							size = 23
						},
						["baz"] = {
							rowspan = 2,
							highlight = {
								left = false,
								top = false,
								right = true,
								bottom = false
							},
							name = "baz",
							device = "foobar3",
							volume_group = {},
							snapshots = {},
							size = 34
						}
					},
					capacity = 666.0,
					device = "/dev/md3",
					state = "normal"
				},
				logical_volume = {
					rowspan = 2,
					highlight = {
						left = false,
						top = true,
						right = true,
						bottom = false
					},
					name = "bar",
					device = "foobar2",
					volume_group = {},
					snapshots = {},
					size = 23
				}
			},
			-- 2
			{
			},
			-- 3
			{
				logical_volume = {
					rowspan = 2,
					highlight = {
						left = false,
						top = false,
						right = true,
						bottom = false
					},
					name = "baz",
					device = "foobar3",
					volume_group = {},
					snapshots = {},
					size = 34
				}
			},
			-- 4
			{
				physical = {
					rowspan = 3,
					highlight = {
						left = true,
						top = false,
						right = false,
						bottom = true
					},
					id = "3:2",
					model = "model1",
					revision = "qwerty",
					serial = "010001112",
					size = 666,
					state = "allocated"
				}
			},
			-- 5
			{
				logical_volume = {
					rowspan = 2,
					highlight = {
						left = false,
						top = false,
						right = true,
						bottom = true
					},
					name = "foo",
					device = "foobar1",
					volume_group = {},
					snapshots = {},
					size = 12
				}
			},
			-- 6
			{
			}
		}

		assert( common.compare_tables(
				matrix.filter_borders_highlight(
					matrix.overall( {
						physicals = self.physicals_triple,
						logicals = self.logicals_triple
					} )
				),
				needed
			)
		)
	end
	function TestMatrix:test_matrix_with_free_drives()
		local physicals = {
			["3:1"] = {
				id = "3:1",
				model = "model1",
				revision = "qwerty",
				serial = "010001111",
				size = 666,
				state = "0"
			},
			["3:2"] = {
				id = "3:2",
				model = "model1",
				revision = "qwerty",
				serial = "010001112",
				size = 666,
				state = "free"
			}
		}
		local logicals = {
			[0] = {
				id = 0,
				level = "passthrough",
				physicals = {
					["3:1"] = "0",
				},
				capacity = 666.0,
				device = "/dev/md0",
				state = "normal"
			}
		}
		local needed = {
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = true,
						top = true,
						right = false,
						bottom = true
					},
					id = "3:1",
					model = "model1",
					revision = "qwerty",
					serial = "010001111",
					size = 666,
					state = "allocated"
				},
				logical = {
					rowspan = 1,
					highlight = {
						left = false,
						top = true,
						right = true,
						bottom = true
					},
					id = 0,
					level = "passthrough",
					physicals = {
						["3:1"] = {
							rowspan = 1,
							highlight = {
								left = true,
								top = true,
								right = false,
								bottom = true
							},
							id = "3:1",
							model = "model1",
							revision = "qwerty",
							serial = "010001111",
							size = 666,
							state = "allocated"
						}
					},
					capacity = 666.0,
					device = "/dev/md0",
					state = "normal"
				}
			},
			{
				physical = {
					rowspan = 1,
					highlight = {
						left = false,
						top = false,
						right = false,
						bottom = false
					},
					id = "3:2",
					model = "model1",
					revision = "qwerty",
					serial = "010001112",
					size = 666,
					state = "free"
				}
			}
		}
		assert( common.compare_tables(
				matrix.filter_borders_highlight(
					matrix.overall( {
						physicals = physicals,
						logicals = logicals
					} )
				),
				needed
			)
		)
	end
	function TestMatrix:test_matrix_with_snapshots()
		local physicals = {
			["3:1"] = {
				id = "3:1",
				model = "model1",
				revision = "qwerty",
				serial = "010001111",
				size = 666,
				state = "0"
			}
		}
		local logicals = {
			[0] = {
				id = 0,
				level = "passthrough",
				physicals = {
					["3:1"] = "0",
				},
				logical_volumes = {
					["foo"] = lvm.LogicalVolume:new( {
						name = "foo",
						device = "foobar1",
						volume_group = {}, -- It is dummy
						size = 12,
						snapshots = {
							lvm.Snapshot:new( {
								name = "foo_2011-06-13_13-13-13",
								device = "foobar1",
								volume_group = {}, -- It is dummy
								size = 12,
								allocated = 6,
								logical_volume = "foo"
							} ),
							lvm.Snapshot:new( {
								name = "foo_2011-02-26_13-13-26",
								device = "foobar1",
								volume_group = {}, -- It is dummy
								size = 12,
								allocated = 6,
								logical_volume = "foo"
							} )
						}
					} ),
					["foo_2011-06-13_13-13-13"] = lvm.Snapshot:new( {
						name = "foo_2011-06-13_13-13-13",
						device = "foobar1",
						volume_group = {}, -- It is dummy
						size = 12,
						allocated = 6,
						logical_volume = "foo"
					} ),
					["foo_2011-02-26_13-13-26"] = lvm.Snapshot:new( {
						name = "foo_2011-02-26_13-13-26",
						device = "foobar1",
						volume_group = {}, -- It is dummy
						size = 12,
						allocated = 6,
						logical_volume = "foo"
					} )
				},
				capacity = 666.0,
				device = "/dev/md0",
				state = "normal"
			}
		}
		local needed = {
			{
				physical = {
					rowspan = 3,
					id = "3:1",
					model = "model1",
					revision = "qwerty",
					serial = "010001111",
					size = 666,
					state = "allocated"
				},
				logical = {
					rowspan = 3,
					id = 0,
					level = "passthrough",
					physicals = {
						["3:1"] = {
							rowspan = 3,
							id = "3:1",
							model = "model1",
							revision = "qwerty",
							serial = "010001111",
							size = 666,
							state = "allocated"
						}
					},
					logical_volumes = {
						["foo"] = {
							rowspan = 1,
							name = "foo",
							device = "foobar1",
							volume_group = {},
							snapshots = {
								{
									name = "foo_2011-06-13_13-13-13",
									device = "foobar1",
									volume_group = {},
									size = 12,
									allocated = 6,
									logical_volume = "foo"
								},
								{
									name = "foo_2011-02-26_13-13-26",
									device = "foobar1",
									volume_group = {},
									size = 12,
									allocated = 6,
									logical_volume = "foo"
								}
							},
							size = 12
						},
						["foo_2011-06-13_13-13-13"] = {
							rowspan = 1,
							name = "foo_2011-06-13_13-13-13",
							device = "foobar1",
							volume_group = {},
							size = 12,
							allocated = 6,
							logical_volume = "foo"
						},
						["foo_2011-02-26_13-13-26"] = {
							rowspan = 1,
							name = "foo_2011-02-26_13-13-26",
							device = "foobar1",
							volume_group = {},
							size = 12,
							allocated = 6,
							logical_volume = "foo"
						}
					},
					capacity = 666.0,
					device = "/dev/md0",
					state = "normal"
				},
				logical_volume = {
					rowspan = 1,
					name = "foo",
					device = "foobar1",
					volume_group = {},
					snapshots = {
						{
							name = "foo_2011-06-13_13-13-13",
							device = "foobar1",
							volume_group = {},
							size = 12,
							allocated = 6,
							logical_volume = "foo"
						},
						{
							name = "foo_2011-02-26_13-13-26",
							device = "foobar1",
							volume_group = {},
							size = 12,
							allocated = 6,
							logical_volume = "foo"
						}
					},
					size = 12
				}
			},
			{
				logical_volume = {
					rowspan = 1,
					name = "foo_2011-02-26_13-13-26",
					device = "foobar1",
					volume_group = {},
					size = 12,
					allocated = 6,
					logical_volume = "foo"
				}
			},
			{
				logical_volume = {
					rowspan = 1,
					name = "foo_2011-06-13_13-13-13",
					device = "foobar1",
					volume_group = {},
					size = 12,
					allocated = 6,
					logical_volume = "foo"
				}
			}
		}
		assert( common.compare_tables(
				matrix.overall( {
					physicals = physicals,
					logicals = logicals
				} ),
				needed
			)
		)
	end
	function TestMatrix:test_access_pattern_adding()
		local matrix = matrix.filter_add_access_patterns(
			matrix.overall( {
				physicals = self.physicals_triple,
				logicals = self.logicals_triple,
			} ),
			self.access_patterns
		)
		assertEquals( matrix[1].access_pattern.name, "foobar3" )
		assertEquals( matrix[2].access_pattern.name, "foobar4" )
		assertEquals( matrix[3].access_pattern.name, "foobar5" )
		assertEquals( matrix[4].access_pattern.name, "foobaz1" )
		assertEquals( matrix[5].access_pattern.name, "foobaz2" )
		assertEquals( matrix[5].physical, nil )
		assertEquals( matrix[5].logical, nil )
	end

TestMibToTib = {}
	function TestMibToTib:test_values_160gb()
		print( assertEquals( matrix.mib2tib( 160E3 ), "0.15" ) )
	end
	function TestMibToTib:test_values_320gb()
		assertEquals( matrix.mib2tib( 320E3 ), "0.30" )
	end
	function TestMibToTib:test_values_640gb()
		assertEquals( matrix.mib2tib( 640E3 ), "0.61" )
	end
	function TestMibToTib:test_values_750gb()
		assertEquals( matrix.mib2tib( 750E3 ), "0.71" )
	end
	function TestMibToTib:test_values_1tb()
		assertEquals( matrix.mib2tib( 1E6 ), "0.95" )
	end
	function TestMibToTib:test_values_1500gb()
		assertEquals( matrix.mib2tib( 15E5 ), "1.43" )
	end
	function TestMibToTib:test_values_2tb()
		assertEquals( matrix.mib2tib( 2E6 ), "1.90" )
	end
	function TestMibToTib:test_values_10tb()
		assertEquals( matrix.mib2tib( 10E6 ), "9.53" )
	end
	function TestMibToTib:test_values_100tb()
		assertEquals( matrix.mib2tib( 100E6 ), "95.36" )
	end
	function TestMibToTib:test_values_1pb()
		assertEquals( matrix.mib2tib( 1E9 ), "953.67" )
	end
	function TestMibToTib:test_values_zero()
		assertEquals( matrix.mib2tib( 0 ), "0.00" )
	end

LuaUnit:run()
