
	This patch brings over a few features from MirBSD:
	* -fhonour-copts
	  If this option is not given, it's warned (depending
	  on environment variables). This is to catch errors
	  of misbuilt packages which override CFLAGS themselves.
	* Make -fno-strict-aliasing and -fno-delete-null-pointer-checks
	  the default for -O2/-Os, because they trigger gcc bugs
	  and can delete code with security implications.

	This patch was authored by Thorsten Glaser <tg at mirbsd.de>
	with copyright assignment to the FSF in effect.

--- a/gcc/c-opts.c
+++ b/gcc/c-opts.c
@@ -106,6 +106,9 @@
 /* Number of deferred options scanned for -include.  */
 static size_t include_cursor;
 
+/* Check if a port honours COPTS.  */
+static int honour_copts = 0;
+
 static void set_Wimplicit (int);
 static void handle_OPT_d (const char *);
 static void set_std_cxx98 (int);
@@ -689,6 +692,12 @@
       flag_exceptions = value;
       break;
 
+    case OPT_fhonour_copts:
+      if (c_language == clk_c) {
+	honour_copts++;
+      }
+      break;
+
     case OPT_fimplement_inlines:
       flag_implement_inlines = value;
       break;
@@ -1198,6 +1207,47 @@
       return false;
     }
 
+  if (c_language == clk_c) {
+    char *ev = getenv ("GCC_HONOUR_COPTS");
+    int evv;
+    if (ev == NULL)
+      evv = -1;
+    else if ((*ev == '0') || (*ev == '\0'))
+      evv = 0;
+    else if (*ev == '1')
+      evv = 1;
+    else if (*ev == '2')
+      evv = 2;
+    else if (*ev == 's')
+      evv = -1;
+    else {
+      warning (0, "unknown GCC_HONOUR_COPTS value, assuming 1");
+      evv = 1; /* maybe depend this on something like MIRBSD_NATIVE?  */
+    }
+    if (evv == 1) {
+      if (honour_copts == 0) {
+	error ("someone does not honour COPTS at all in lenient mode");
+	return false;
+      } else if (honour_copts != 1) {
+	warning (0, "someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+      }
+    } else if (evv == 2) {
+      if (honour_copts == 0) {
+	error ("someone does not honour COPTS at all in strict mode");
+	return false;
+      } else if (honour_copts != 1) {
+	error ("someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+	return false;
+      }
+    } else if (evv == 0) {
+      if (honour_copts != 1)
+	inform (0, "someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+    }
+  }
+
   return true;
 }
 
--- a/gcc/c.opt
+++ b/gcc/c.opt
@@ -609,6 +609,9 @@
 fhonor-std
 C++ ObjC++
 
+fhonour-copts
+C ObjC C++ ObjC++ RejectNegative
+
 fhosted
 C ObjC
 Assume normal C execution environment
--- a/gcc/common.opt
+++ b/gcc/common.opt
@@ -587,6 +587,9 @@
 Common Report Var(flag_guess_branch_prob) Optimization
 Enable guessing of branch probabilities
 
+fhonour-copts
+Common RejectNegative
+
 ; Nonzero means ignore `#ident' directives.  0 means handle them.
 ; Generate position-independent code for executables if possible
 ; On SVR4 targets, it also controls whether or not to emit a
--- a/gcc/opts.c
+++ b/gcc/opts.c
@@ -896,9 +896,6 @@
   flag_schedule_insns_after_reload = opt2;
 #endif
   flag_regmove = opt2;
-  flag_strict_aliasing = opt2;
-  flag_strict_overflow = opt2;
-  flag_delete_null_pointer_checks = opt2;
   flag_reorder_blocks = opt2;
   flag_reorder_functions = opt2;
   flag_tree_vrp = opt2;
@@ -922,6 +919,9 @@
 
   /* -O3 optimizations.  */
   opt3 = (optimize >= 3);
+  flag_strict_aliasing = opt3;
+  flag_strict_overflow = opt3;
+  flag_delete_null_pointer_checks = opt3;
   flag_predictive_commoning = opt3;
   flag_inline_functions = opt3;
   flag_unswitch_loops = opt3;
@@ -1605,6 +1605,9 @@
       enable_warning_as_error (arg, value, lang_mask);
       break;
 
+    case OPT_fhonour_copts:
+      break;
+
     case OPT_Wextra:
       set_Wextra (value);
       break;
--- a/gcc/doc/invoke.texi
+++ b/gcc/doc/invoke.texi
@@ -5699,7 +5699,7 @@
 second branch or a point immediately following it, depending on whether
 the condition is known to be true or false.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fsplit-wide-types
 @opindex fsplit-wide-types
@@ -5844,7 +5844,7 @@
 @option{-fno-delete-null-pointer-checks} to disable this optimization
 for programs which depend on that behavior.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fexpensive-optimizations
 @opindex fexpensive-optimizations
--- a/gcc/java/jvspec.c
+++ b/gcc/java/jvspec.c
@@ -670,6 +670,7 @@
      class name.  Append dummy `.c' that can be stripped by set_input so %b
      is correct.  */ 
   set_input (concat (main_class_name, "main.c", NULL));
+  putenv ("GCC_HONOUR_COPTS=s"); /* XXX hack!  */
   err = do_spec (jvgenmain_spec);
   if (err == 0)
     {
